# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import google.api.service_interface_messages_pb2 as service__interface__messages__pb2


class ChannelConnectorServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Start = channel.unary_unary(
        '/nuance.dialog.channelconnector.v1beta1.ChannelConnectorService/Start',
        request_serializer=service__interface__messages__pb2.StartRequest.SerializeToString,
        response_deserializer=service__interface__messages__pb2.StartResponse.FromString,
        )
    self.Execute = channel.unary_unary(
        '/nuance.dialog.channelconnector.v1beta1.ChannelConnectorService/Execute',
        request_serializer=service__interface__messages__pb2.ExecuteRequest.SerializeToString,
        response_deserializer=service__interface__messages__pb2.ExecuteResponse.FromString,
        )
    self.Stop = channel.unary_unary(
        '/nuance.dialog.channelconnector.v1beta1.ChannelConnectorService/Stop',
        request_serializer=service__interface__messages__pb2.StopRequest.SerializeToString,
        response_deserializer=service__interface__messages__pb2.StopResponse.FromString,
        )


class ChannelConnectorServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Start(self, request, context):
    """Starts a conversation.
    Returns a **StartResponse** object.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Execute(self, request, context):
    """Used to continuously interact with the conversation based on end user input or events.
    Returns an **ExecuteRequest** object that will contain data related to the dialog interactions and that can be used by the client to interact with the end user.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Stop(self, request, context):
    """Ends a conversation and performs cleanup.
    Returns a **StopResponse** object.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ChannelConnectorServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Start': grpc.unary_unary_rpc_method_handler(
          servicer.Start,
          request_deserializer=service__interface__messages__pb2.StartRequest.FromString,
          response_serializer=service__interface__messages__pb2.StartResponse.SerializeToString,
      ),
      'Execute': grpc.unary_unary_rpc_method_handler(
          servicer.Execute,
          request_deserializer=service__interface__messages__pb2.ExecuteRequest.FromString,
          response_serializer=service__interface__messages__pb2.ExecuteResponse.SerializeToString,
      ),
      'Stop': grpc.unary_unary_rpc_method_handler(
          servicer.Stop,
          request_deserializer=service__interface__messages__pb2.StopRequest.FromString,
          response_serializer=service__interface__messages__pb2.StopResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'nuance.dialog.channelconnector.v1beta1.ChannelConnectorService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
