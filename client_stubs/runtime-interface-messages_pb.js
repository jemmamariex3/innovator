/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
goog.object.extend(proto, google_protobuf_struct_pb);
goog.exportSymbol('proto.nuance.dialog.runtime.common.v1beta1.Action', null, global);
goog.exportSymbol('proto.nuance.dialog.runtime.common.v1beta1.Action.DataAction', null, global);
goog.exportSymbol('proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction', null, global);
goog.exportSymbol('proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio', null, global);
goog.exportSymbol('proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Nlg', null, global);
goog.exportSymbol('proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Visual', null, global);
goog.exportSymbol('proto.nuance.dialog.runtime.common.v1beta1.Event', null, global);
goog.exportSymbol('proto.nuance.dialog.runtime.common.v1beta1.Event.EventType', null, global);
goog.exportSymbol('proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload', null, global);
goog.exportSymbol('proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload', null, global);
goog.exportSymbol('proto.nuance.dialog.runtime.common.v1beta1.Input', null, global);
goog.exportSymbol('proto.nuance.dialog.runtime.common.v1beta1.Interpretation', null, global);
goog.exportSymbol('proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload', null, global);
goog.exportSymbol('proto.nuance.dialog.runtime.common.v1beta1.RequestData', null, global);
goog.exportSymbol('proto.nuance.dialog.runtime.common.v1beta1.Selector', null, global);
goog.exportSymbol('proto.nuance.dialog.runtime.common.v1beta1.SessionData', null, global);
goog.exportSymbol('proto.nuance.dialog.runtime.common.v1beta1.StartRequestPayload', null, global);
goog.exportSymbol('proto.nuance.dialog.runtime.common.v1beta1.StartResponsePayload', null, global);
goog.exportSymbol('proto.nuance.dialog.runtime.common.v1beta1.ViewData', null, global);
goog.exportSymbol('proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dialog.runtime.common.v1beta1.Selector = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.dialog.runtime.common.v1beta1.Selector, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nuance.dialog.runtime.common.v1beta1.Selector.displayName = 'proto.nuance.dialog.runtime.common.v1beta1.Selector';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dialog.runtime.common.v1beta1.Selector.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dialog.runtime.common.v1beta1.Selector.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.Selector} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.Selector.toObject = function(includeInstance, msg) {
  var f, obj = {
    channel: jspb.Message.getFieldWithDefault(msg, 1, ""),
    language: jspb.Message.getFieldWithDefault(msg, 2, ""),
    library: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.Selector}
 */
proto.nuance.dialog.runtime.common.v1beta1.Selector.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dialog.runtime.common.v1beta1.Selector;
  return proto.nuance.dialog.runtime.common.v1beta1.Selector.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.Selector} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.Selector}
 */
proto.nuance.dialog.runtime.common.v1beta1.Selector.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLibrary(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dialog.runtime.common.v1beta1.Selector.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dialog.runtime.common.v1beta1.Selector.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.Selector} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.Selector.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLanguage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLibrary();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string channel = 1;
 * @return {string}
 */
proto.nuance.dialog.runtime.common.v1beta1.Selector.prototype.getChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nuance.dialog.runtime.common.v1beta1.Selector.prototype.setChannel = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string language = 2;
 * @return {string}
 */
proto.nuance.dialog.runtime.common.v1beta1.Selector.prototype.getLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.nuance.dialog.runtime.common.v1beta1.Selector.prototype.setLanguage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string library = 3;
 * @return {string}
 */
proto.nuance.dialog.runtime.common.v1beta1.Selector.prototype.getLibrary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.nuance.dialog.runtime.common.v1beta1.Selector.prototype.setLibrary = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dialog.runtime.common.v1beta1.SessionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.dialog.runtime.common.v1beta1.SessionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nuance.dialog.runtime.common.v1beta1.SessionData.displayName = 'proto.nuance.dialog.runtime.common.v1beta1.SessionData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dialog.runtime.common.v1beta1.SessionData.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dialog.runtime.common.v1beta1.SessionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.SessionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.SessionData.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.SessionData}
 */
proto.nuance.dialog.runtime.common.v1beta1.SessionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dialog.runtime.common.v1beta1.SessionData;
  return proto.nuance.dialog.runtime.common.v1beta1.SessionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.SessionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.SessionData}
 */
proto.nuance.dialog.runtime.common.v1beta1.SessionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dialog.runtime.common.v1beta1.SessionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dialog.runtime.common.v1beta1.SessionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.SessionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.SessionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.nuance.dialog.runtime.common.v1beta1.SessionData.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nuance.dialog.runtime.common.v1beta1.SessionData.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dialog.runtime.common.v1beta1.StartRequestPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.dialog.runtime.common.v1beta1.StartRequestPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nuance.dialog.runtime.common.v1beta1.StartRequestPayload.displayName = 'proto.nuance.dialog.runtime.common.v1beta1.StartRequestPayload';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dialog.runtime.common.v1beta1.StartRequestPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dialog.runtime.common.v1beta1.StartRequestPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.StartRequestPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.StartRequestPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    modelRef: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sessionDataMap: (f = msg.getSessionDataMap()) ? f.toObject(includeInstance, proto.nuance.dialog.runtime.common.v1beta1.SessionData.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.StartRequestPayload}
 */
proto.nuance.dialog.runtime.common.v1beta1.StartRequestPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dialog.runtime.common.v1beta1.StartRequestPayload;
  return proto.nuance.dialog.runtime.common.v1beta1.StartRequestPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.StartRequestPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.StartRequestPayload}
 */
proto.nuance.dialog.runtime.common.v1beta1.StartRequestPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setModelRef(value);
      break;
    case 2:
      var value = msg.getSessionDataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.nuance.dialog.runtime.common.v1beta1.SessionData.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dialog.runtime.common.v1beta1.StartRequestPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dialog.runtime.common.v1beta1.StartRequestPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.StartRequestPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.StartRequestPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModelRef();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSessionDataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.nuance.dialog.runtime.common.v1beta1.SessionData.serializeBinaryToWriter);
  }
};


/**
 * optional string model_ref = 1;
 * @return {string}
 */
proto.nuance.dialog.runtime.common.v1beta1.StartRequestPayload.prototype.getModelRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nuance.dialog.runtime.common.v1beta1.StartRequestPayload.prototype.setModelRef = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, SessionData> session_data = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.nuance.dialog.runtime.common.v1beta1.SessionData>}
 */
proto.nuance.dialog.runtime.common.v1beta1.StartRequestPayload.prototype.getSessionDataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.nuance.dialog.runtime.common.v1beta1.SessionData>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.nuance.dialog.runtime.common.v1beta1.SessionData));
};


proto.nuance.dialog.runtime.common.v1beta1.StartRequestPayload.prototype.clearSessionDataMap = function() {
  this.getSessionDataMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dialog.runtime.common.v1beta1.StartResponsePayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.dialog.runtime.common.v1beta1.StartResponsePayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nuance.dialog.runtime.common.v1beta1.StartResponsePayload.displayName = 'proto.nuance.dialog.runtime.common.v1beta1.StartResponsePayload';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dialog.runtime.common.v1beta1.StartResponsePayload.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dialog.runtime.common.v1beta1.StartResponsePayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.StartResponsePayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.StartResponsePayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.StartResponsePayload}
 */
proto.nuance.dialog.runtime.common.v1beta1.StartResponsePayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dialog.runtime.common.v1beta1.StartResponsePayload;
  return proto.nuance.dialog.runtime.common.v1beta1.StartResponsePayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.StartResponsePayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.StartResponsePayload}
 */
proto.nuance.dialog.runtime.common.v1beta1.StartResponsePayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dialog.runtime.common.v1beta1.StartResponsePayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dialog.runtime.common.v1beta1.StartResponsePayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.StartResponsePayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.StartResponsePayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string session_id = 1;
 * @return {string}
 */
proto.nuance.dialog.runtime.common.v1beta1.StartResponsePayload.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nuance.dialog.runtime.common.v1beta1.StartResponsePayload.prototype.setSessionId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dialog.runtime.common.v1beta1.Input = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nuance.dialog.runtime.common.v1beta1.Input.oneofGroups_);
};
goog.inherits(proto.nuance.dialog.runtime.common.v1beta1.Input, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nuance.dialog.runtime.common.v1beta1.Input.displayName = 'proto.nuance.dialog.runtime.common.v1beta1.Input';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nuance.dialog.runtime.common.v1beta1.Input.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.nuance.dialog.runtime.common.v1beta1.Input.InputCase = {
  INPUT_NOT_SET: 0,
  USER_TEXT: 1,
  INTERPRETATION: 2
};

/**
 * @return {proto.nuance.dialog.runtime.common.v1beta1.Input.InputCase}
 */
proto.nuance.dialog.runtime.common.v1beta1.Input.prototype.getInputCase = function() {
  return /** @type {proto.nuance.dialog.runtime.common.v1beta1.Input.InputCase} */(jspb.Message.computeOneofCase(this, proto.nuance.dialog.runtime.common.v1beta1.Input.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dialog.runtime.common.v1beta1.Input.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dialog.runtime.common.v1beta1.Input.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.Input} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.Input.toObject = function(includeInstance, msg) {
  var f, obj = {
    userText: jspb.Message.getFieldWithDefault(msg, 1, ""),
    interpretation: (f = msg.getInterpretation()) && proto.nuance.dialog.runtime.common.v1beta1.Interpretation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.Input}
 */
proto.nuance.dialog.runtime.common.v1beta1.Input.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dialog.runtime.common.v1beta1.Input;
  return proto.nuance.dialog.runtime.common.v1beta1.Input.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.Input} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.Input}
 */
proto.nuance.dialog.runtime.common.v1beta1.Input.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserText(value);
      break;
    case 2:
      var value = new proto.nuance.dialog.runtime.common.v1beta1.Interpretation;
      reader.readMessage(value,proto.nuance.dialog.runtime.common.v1beta1.Interpretation.deserializeBinaryFromReader);
      msg.setInterpretation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dialog.runtime.common.v1beta1.Input.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dialog.runtime.common.v1beta1.Input.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.Input} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.Input.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInterpretation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nuance.dialog.runtime.common.v1beta1.Interpretation.serializeBinaryToWriter
    );
  }
};


/**
 * optional string user_text = 1;
 * @return {string}
 */
proto.nuance.dialog.runtime.common.v1beta1.Input.prototype.getUserText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nuance.dialog.runtime.common.v1beta1.Input.prototype.setUserText = function(value) {
  jspb.Message.setOneofField(this, 1, proto.nuance.dialog.runtime.common.v1beta1.Input.oneofGroups_[0], value);
};


proto.nuance.dialog.runtime.common.v1beta1.Input.prototype.clearUserText = function() {
  jspb.Message.setOneofField(this, 1, proto.nuance.dialog.runtime.common.v1beta1.Input.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dialog.runtime.common.v1beta1.Input.prototype.hasUserText = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Interpretation interpretation = 2;
 * @return {?proto.nuance.dialog.runtime.common.v1beta1.Interpretation}
 */
proto.nuance.dialog.runtime.common.v1beta1.Input.prototype.getInterpretation = function() {
  return /** @type{?proto.nuance.dialog.runtime.common.v1beta1.Interpretation} */ (
    jspb.Message.getWrapperField(this, proto.nuance.dialog.runtime.common.v1beta1.Interpretation, 2));
};


/** @param {?proto.nuance.dialog.runtime.common.v1beta1.Interpretation|undefined} value */
proto.nuance.dialog.runtime.common.v1beta1.Input.prototype.setInterpretation = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.nuance.dialog.runtime.common.v1beta1.Input.oneofGroups_[0], value);
};


proto.nuance.dialog.runtime.common.v1beta1.Input.prototype.clearInterpretation = function() {
  this.setInterpretation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dialog.runtime.common.v1beta1.Input.prototype.hasInterpretation = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload.displayName = 'proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    input: (f = msg.getInput()) && proto.nuance.dialog.runtime.common.v1beta1.Input.toObject(includeInstance, f),
    event: (f = msg.getEvent()) && proto.nuance.dialog.runtime.common.v1beta1.Event.toObject(includeInstance, f),
    sessionDataMap: (f = msg.getSessionDataMap()) ? f.toObject(includeInstance, proto.nuance.dialog.runtime.common.v1beta1.SessionData.toObject) : [],
    data: (f = msg.getData()) && proto.nuance.dialog.runtime.common.v1beta1.RequestData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload}
 */
proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload;
  return proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload}
 */
proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nuance.dialog.runtime.common.v1beta1.Input;
      reader.readMessage(value,proto.nuance.dialog.runtime.common.v1beta1.Input.deserializeBinaryFromReader);
      msg.setInput(value);
      break;
    case 2:
      var value = new proto.nuance.dialog.runtime.common.v1beta1.Event;
      reader.readMessage(value,proto.nuance.dialog.runtime.common.v1beta1.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    case 3:
      var value = msg.getSessionDataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.nuance.dialog.runtime.common.v1beta1.SessionData.deserializeBinaryFromReader, "");
         });
      break;
    case 4:
      var value = new proto.nuance.dialog.runtime.common.v1beta1.RequestData;
      reader.readMessage(value,proto.nuance.dialog.runtime.common.v1beta1.RequestData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInput();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nuance.dialog.runtime.common.v1beta1.Input.serializeBinaryToWriter
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nuance.dialog.runtime.common.v1beta1.Event.serializeBinaryToWriter
    );
  }
  f = message.getSessionDataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.nuance.dialog.runtime.common.v1beta1.SessionData.serializeBinaryToWriter);
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.nuance.dialog.runtime.common.v1beta1.RequestData.serializeBinaryToWriter
    );
  }
};


/**
 * optional Input input = 1;
 * @return {?proto.nuance.dialog.runtime.common.v1beta1.Input}
 */
proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload.prototype.getInput = function() {
  return /** @type{?proto.nuance.dialog.runtime.common.v1beta1.Input} */ (
    jspb.Message.getWrapperField(this, proto.nuance.dialog.runtime.common.v1beta1.Input, 1));
};


/** @param {?proto.nuance.dialog.runtime.common.v1beta1.Input|undefined} value */
proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload.prototype.setInput = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload.prototype.clearInput = function() {
  this.setInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload.prototype.hasInput = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Event event = 2;
 * @return {?proto.nuance.dialog.runtime.common.v1beta1.Event}
 */
proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload.prototype.getEvent = function() {
  return /** @type{?proto.nuance.dialog.runtime.common.v1beta1.Event} */ (
    jspb.Message.getWrapperField(this, proto.nuance.dialog.runtime.common.v1beta1.Event, 2));
};


/** @param {?proto.nuance.dialog.runtime.common.v1beta1.Event|undefined} value */
proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload.prototype.setEvent = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * map<string, SessionData> session_data = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.nuance.dialog.runtime.common.v1beta1.SessionData>}
 */
proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload.prototype.getSessionDataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.nuance.dialog.runtime.common.v1beta1.SessionData>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.nuance.dialog.runtime.common.v1beta1.SessionData));
};


proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload.prototype.clearSessionDataMap = function() {
  this.getSessionDataMap().clear();
};


/**
 * optional RequestData data = 4;
 * @return {?proto.nuance.dialog.runtime.common.v1beta1.RequestData}
 */
proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload.prototype.getData = function() {
  return /** @type{?proto.nuance.dialog.runtime.common.v1beta1.RequestData} */ (
    jspb.Message.getWrapperField(this, proto.nuance.dialog.runtime.common.v1beta1.RequestData, 4));
};


/** @param {?proto.nuance.dialog.runtime.common.v1beta1.RequestData|undefined} value */
proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload.prototype.setData = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload.prototype.clearData = function() {
  this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload.prototype.hasData = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dialog.runtime.common.v1beta1.RequestData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.dialog.runtime.common.v1beta1.RequestData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nuance.dialog.runtime.common.v1beta1.RequestData.displayName = 'proto.nuance.dialog.runtime.common.v1beta1.RequestData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dialog.runtime.common.v1beta1.RequestData.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dialog.runtime.common.v1beta1.RequestData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.RequestData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.RequestData.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: (f = msg.getValue()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.RequestData}
 */
proto.nuance.dialog.runtime.common.v1beta1.RequestData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dialog.runtime.common.v1beta1.RequestData;
  return proto.nuance.dialog.runtime.common.v1beta1.RequestData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.RequestData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.RequestData}
 */
proto.nuance.dialog.runtime.common.v1beta1.RequestData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dialog.runtime.common.v1beta1.RequestData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dialog.runtime.common.v1beta1.RequestData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.RequestData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.RequestData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.nuance.dialog.runtime.common.v1beta1.RequestData.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nuance.dialog.runtime.common.v1beta1.RequestData.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Struct value = 2;
 * @return {?proto.google.protobuf.Struct}
 */
proto.nuance.dialog.runtime.common.v1beta1.RequestData.prototype.getValue = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 2));
};


/** @param {?proto.google.protobuf.Struct|undefined} value */
proto.nuance.dialog.runtime.common.v1beta1.RequestData.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.nuance.dialog.runtime.common.v1beta1.RequestData.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dialog.runtime.common.v1beta1.RequestData.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dialog.runtime.common.v1beta1.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.dialog.runtime.common.v1beta1.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nuance.dialog.runtime.common.v1beta1.Event.displayName = 'proto.nuance.dialog.runtime.common.v1beta1.Event';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dialog.runtime.common.v1beta1.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dialog.runtime.common.v1beta1.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.Event}
 */
proto.nuance.dialog.runtime.common.v1beta1.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dialog.runtime.common.v1beta1.Event;
  return proto.nuance.dialog.runtime.common.v1beta1.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.Event}
 */
proto.nuance.dialog.runtime.common.v1beta1.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.nuance.dialog.runtime.common.v1beta1.Event.EventType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dialog.runtime.common.v1beta1.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dialog.runtime.common.v1beta1.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.nuance.dialog.runtime.common.v1beta1.Event.EventType = {
  SUCCESS: 0,
  ERROR: 1,
  NO_INPUT: 2,
  NO_MATCH: 3,
  HANGUP: 4
};

/**
 * optional EventType type = 1;
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.Event.EventType}
 */
proto.nuance.dialog.runtime.common.v1beta1.Event.prototype.getType = function() {
  return /** @type {!proto.nuance.dialog.runtime.common.v1beta1.Event.EventType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.nuance.dialog.runtime.common.v1beta1.Event.EventType} value */
proto.nuance.dialog.runtime.common.v1beta1.Event.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.nuance.dialog.runtime.common.v1beta1.Event.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.nuance.dialog.runtime.common.v1beta1.Event.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload.repeatedFields_, null);
};
goog.inherits(proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload.displayName = 'proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionDataMap: (f = msg.getSessionDataMap()) ? f.toObject(includeInstance, proto.nuance.dialog.runtime.common.v1beta1.SessionData.toObject) : [],
    actionList: jspb.Message.toObjectList(msg.getActionList(),
    proto.nuance.dialog.runtime.common.v1beta1.Action.toObject, includeInstance),
    orchestrationPayload: (f = msg.getOrchestrationPayload()) && proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload.toObject(includeInstance, f),
    viewData: (f = msg.getViewData()) && proto.nuance.dialog.runtime.common.v1beta1.ViewData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload}
 */
proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload;
  return proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload}
 */
proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getSessionDataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.nuance.dialog.runtime.common.v1beta1.SessionData.deserializeBinaryFromReader, "");
         });
      break;
    case 2:
      var value = new proto.nuance.dialog.runtime.common.v1beta1.Action;
      reader.readMessage(value,proto.nuance.dialog.runtime.common.v1beta1.Action.deserializeBinaryFromReader);
      msg.addAction(value);
      break;
    case 3:
      var value = new proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload;
      reader.readMessage(value,proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload.deserializeBinaryFromReader);
      msg.setOrchestrationPayload(value);
      break;
    case 4:
      var value = new proto.nuance.dialog.runtime.common.v1beta1.ViewData;
      reader.readMessage(value,proto.nuance.dialog.runtime.common.v1beta1.ViewData.deserializeBinaryFromReader);
      msg.setViewData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionDataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.nuance.dialog.runtime.common.v1beta1.SessionData.serializeBinaryToWriter);
  }
  f = message.getActionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.nuance.dialog.runtime.common.v1beta1.Action.serializeBinaryToWriter
    );
  }
  f = message.getOrchestrationPayload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload.serializeBinaryToWriter
    );
  }
  f = message.getViewData();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.nuance.dialog.runtime.common.v1beta1.ViewData.serializeBinaryToWriter
    );
  }
};


/**
 * map<string, SessionData> session_data = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.nuance.dialog.runtime.common.v1beta1.SessionData>}
 */
proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload.prototype.getSessionDataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.nuance.dialog.runtime.common.v1beta1.SessionData>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.nuance.dialog.runtime.common.v1beta1.SessionData));
};


proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload.prototype.clearSessionDataMap = function() {
  this.getSessionDataMap().clear();
};


/**
 * repeated Action action = 2;
 * @return {!Array<!proto.nuance.dialog.runtime.common.v1beta1.Action>}
 */
proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload.prototype.getActionList = function() {
  return /** @type{!Array<!proto.nuance.dialog.runtime.common.v1beta1.Action>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nuance.dialog.runtime.common.v1beta1.Action, 2));
};


/** @param {!Array<!proto.nuance.dialog.runtime.common.v1beta1.Action>} value */
proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload.prototype.setActionList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.Action=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.Action}
 */
proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload.prototype.addAction = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.nuance.dialog.runtime.common.v1beta1.Action, opt_index);
};


proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload.prototype.clearActionList = function() {
  this.setActionList([]);
};


/**
 * optional OrchestrationPayload orchestration_payload = 3;
 * @return {?proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload}
 */
proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload.prototype.getOrchestrationPayload = function() {
  return /** @type{?proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload} */ (
    jspb.Message.getWrapperField(this, proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload, 3));
};


/** @param {?proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload|undefined} value */
proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload.prototype.setOrchestrationPayload = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload.prototype.clearOrchestrationPayload = function() {
  this.setOrchestrationPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload.prototype.hasOrchestrationPayload = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ViewData view_data = 4;
 * @return {?proto.nuance.dialog.runtime.common.v1beta1.ViewData}
 */
proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload.prototype.getViewData = function() {
  return /** @type{?proto.nuance.dialog.runtime.common.v1beta1.ViewData} */ (
    jspb.Message.getWrapperField(this, proto.nuance.dialog.runtime.common.v1beta1.ViewData, 4));
};


/** @param {?proto.nuance.dialog.runtime.common.v1beta1.ViewData|undefined} value */
proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload.prototype.setViewData = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload.prototype.clearViewData = function() {
  this.setViewData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload.prototype.hasViewData = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dialog.runtime.common.v1beta1.Interpretation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nuance.dialog.runtime.common.v1beta1.Interpretation.repeatedFields_, null);
};
goog.inherits(proto.nuance.dialog.runtime.common.v1beta1.Interpretation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nuance.dialog.runtime.common.v1beta1.Interpretation.displayName = 'proto.nuance.dialog.runtime.common.v1beta1.Interpretation';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nuance.dialog.runtime.common.v1beta1.Interpretation.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dialog.runtime.common.v1beta1.Interpretation.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dialog.runtime.common.v1beta1.Interpretation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.Interpretation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.Interpretation.toObject = function(includeInstance, msg) {
  var f, obj = {
    confidence: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    inputMode: jspb.Message.getFieldWithDefault(msg, 3, ""),
    utterance: jspb.Message.getFieldWithDefault(msg, 4, ""),
    dataMap: (f = msg.getDataMap()) ? f.toObject(includeInstance, undefined) : [],
    alternativeinterpretationsList: jspb.Message.toObjectList(msg.getAlternativeinterpretationsList(),
    proto.nuance.dialog.runtime.common.v1beta1.Interpretation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.Interpretation}
 */
proto.nuance.dialog.runtime.common.v1beta1.Interpretation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dialog.runtime.common.v1beta1.Interpretation;
  return proto.nuance.dialog.runtime.common.v1beta1.Interpretation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.Interpretation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.Interpretation}
 */
proto.nuance.dialog.runtime.common.v1beta1.Interpretation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setConfidence(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInputMode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUtterance(value);
      break;
    case 5:
      var value = msg.getDataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 6:
      var value = new proto.nuance.dialog.runtime.common.v1beta1.Interpretation;
      reader.readMessage(value,proto.nuance.dialog.runtime.common.v1beta1.Interpretation.deserializeBinaryFromReader);
      msg.addAlternativeinterpretations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dialog.runtime.common.v1beta1.Interpretation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dialog.runtime.common.v1beta1.Interpretation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.Interpretation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.Interpretation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfidence();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getInputMode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUtterance();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getAlternativeinterpretationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.nuance.dialog.runtime.common.v1beta1.Interpretation.serializeBinaryToWriter
    );
  }
};


/**
 * optional double confidence = 2;
 * @return {number}
 */
proto.nuance.dialog.runtime.common.v1beta1.Interpretation.prototype.getConfidence = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.nuance.dialog.runtime.common.v1beta1.Interpretation.prototype.setConfidence = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional string input_mode = 3;
 * @return {string}
 */
proto.nuance.dialog.runtime.common.v1beta1.Interpretation.prototype.getInputMode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.nuance.dialog.runtime.common.v1beta1.Interpretation.prototype.setInputMode = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string utterance = 4;
 * @return {string}
 */
proto.nuance.dialog.runtime.common.v1beta1.Interpretation.prototype.getUtterance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.nuance.dialog.runtime.common.v1beta1.Interpretation.prototype.setUtterance = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * map<string, string> data = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.nuance.dialog.runtime.common.v1beta1.Interpretation.prototype.getDataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


proto.nuance.dialog.runtime.common.v1beta1.Interpretation.prototype.clearDataMap = function() {
  this.getDataMap().clear();
};


/**
 * repeated Interpretation alternativeInterpretations = 6;
 * @return {!Array<!proto.nuance.dialog.runtime.common.v1beta1.Interpretation>}
 */
proto.nuance.dialog.runtime.common.v1beta1.Interpretation.prototype.getAlternativeinterpretationsList = function() {
  return /** @type{!Array<!proto.nuance.dialog.runtime.common.v1beta1.Interpretation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nuance.dialog.runtime.common.v1beta1.Interpretation, 6));
};


/** @param {!Array<!proto.nuance.dialog.runtime.common.v1beta1.Interpretation>} value */
proto.nuance.dialog.runtime.common.v1beta1.Interpretation.prototype.setAlternativeinterpretationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.Interpretation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.Interpretation}
 */
proto.nuance.dialog.runtime.common.v1beta1.Interpretation.prototype.addAlternativeinterpretations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.nuance.dialog.runtime.common.v1beta1.Interpretation, opt_index);
};


proto.nuance.dialog.runtime.common.v1beta1.Interpretation.prototype.clearAlternativeinterpretationsList = function() {
  this.setAlternativeinterpretationsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dialog.runtime.common.v1beta1.Action = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nuance.dialog.runtime.common.v1beta1.Action.oneofGroups_);
};
goog.inherits(proto.nuance.dialog.runtime.common.v1beta1.Action, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nuance.dialog.runtime.common.v1beta1.Action.displayName = 'proto.nuance.dialog.runtime.common.v1beta1.Action';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  DATA: 1,
  PROMPT: 2
};

/**
 * @return {proto.nuance.dialog.runtime.common.v1beta1.Action.PayloadCase}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.prototype.getPayloadCase = function() {
  return /** @type {proto.nuance.dialog.runtime.common.v1beta1.Action.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.nuance.dialog.runtime.common.v1beta1.Action.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dialog.runtime.common.v1beta1.Action.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.Action} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.nuance.dialog.runtime.common.v1beta1.Action.DataAction.toObject(includeInstance, f),
    prompt: (f = msg.getPrompt()) && proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.Action}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dialog.runtime.common.v1beta1.Action;
  return proto.nuance.dialog.runtime.common.v1beta1.Action.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.Action} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.Action}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nuance.dialog.runtime.common.v1beta1.Action.DataAction;
      reader.readMessage(value,proto.nuance.dialog.runtime.common.v1beta1.Action.DataAction.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 2:
      var value = new proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction;
      reader.readMessage(value,proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.deserializeBinaryFromReader);
      msg.setPrompt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dialog.runtime.common.v1beta1.Action.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.Action} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nuance.dialog.runtime.common.v1beta1.Action.DataAction.serializeBinaryToWriter
    );
  }
  f = message.getPrompt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.DataAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.dialog.runtime.common.v1beta1.Action.DataAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nuance.dialog.runtime.common.v1beta1.Action.DataAction.displayName = 'proto.nuance.dialog.runtime.common.v1beta1.Action.DataAction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.DataAction.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dialog.runtime.common.v1beta1.Action.DataAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.Action.DataAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.DataAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: (f = msg.getValue()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.Action.DataAction}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.DataAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dialog.runtime.common.v1beta1.Action.DataAction;
  return proto.nuance.dialog.runtime.common.v1beta1.Action.DataAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.Action.DataAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.Action.DataAction}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.DataAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.DataAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dialog.runtime.common.v1beta1.Action.DataAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.Action.DataAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.DataAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.DataAction.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nuance.dialog.runtime.common.v1beta1.Action.DataAction.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Struct value = 2;
 * @return {?proto.google.protobuf.Struct}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.DataAction.prototype.getValue = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 2));
};


/** @param {?proto.google.protobuf.Struct|undefined} value */
proto.nuance.dialog.runtime.common.v1beta1.Action.DataAction.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.nuance.dialog.runtime.common.v1beta1.Action.DataAction.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.DataAction.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.repeatedFields_, null);
};
goog.inherits(proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.displayName = 'proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.repeatedFields_ = [3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    vuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nlgList: jspb.Message.toObjectList(msg.getNlgList(),
    proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Nlg.toObject, includeInstance),
    visualList: jspb.Message.toObjectList(msg.getVisualList(),
    proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Visual.toObject, includeInstance),
    audioList: jspb.Message.toObjectList(msg.getAudioList(),
    proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction;
  return proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVuid(value);
      break;
    case 3:
      var value = new proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Nlg;
      reader.readMessage(value,proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Nlg.deserializeBinaryFromReader);
      msg.addNlg(value);
      break;
    case 4:
      var value = new proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Visual;
      reader.readMessage(value,proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Visual.deserializeBinaryFromReader);
      msg.addVisual(value);
      break;
    case 5:
      var value = new proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio;
      reader.readMessage(value,proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio.deserializeBinaryFromReader);
      msg.addAudio(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNlgList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Nlg.serializeBinaryToWriter
    );
  }
  f = message.getVisualList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Visual.serializeBinaryToWriter
    );
  }
  f = message.getAudioList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Nlg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Nlg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Nlg.displayName = 'proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Nlg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Nlg.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Nlg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Nlg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Nlg.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Nlg}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Nlg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Nlg;
  return proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Nlg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Nlg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Nlg}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Nlg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Nlg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Nlg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Nlg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Nlg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Nlg.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Nlg.prototype.setText = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Visual = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Visual, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Visual.displayName = 'proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Visual';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Visual.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Visual.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Visual} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Visual.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Visual}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Visual.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Visual;
  return proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Visual.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Visual} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Visual}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Visual.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Visual.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Visual.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Visual} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Visual.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Visual.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Visual.prototype.setText = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio.oneofGroups_);
};
goog.inherits(proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio.displayName = 'proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio.oneofGroups_ = [[2]];

/**
 * @enum {number}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio.AudiosrcCase = {
  AUDIOSRC_NOT_SET: 0,
  URI: 2
};

/**
 * @return {proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio.AudiosrcCase}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio.prototype.getAudiosrcCase = function() {
  return /** @type {proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio.AudiosrcCase} */(jspb.Message.computeOneofCase(this, proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, ""),
    uri: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio;
  return proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio.prototype.setText = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string uri = 2;
 * @return {string}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio.prototype.setUri = function(value) {
  jspb.Message.setOneofField(this, 2, proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio.oneofGroups_[0], value);
};


proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio.prototype.clearUri = function() {
  jspb.Message.setOneofField(this, 2, proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio.prototype.hasUri = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string vuid = 2;
 * @return {string}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.prototype.getVuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.prototype.setVuid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Nlg nlg = 3;
 * @return {!Array<!proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Nlg>}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.prototype.getNlgList = function() {
  return /** @type{!Array<!proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Nlg>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Nlg, 3));
};


/** @param {!Array<!proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Nlg>} value */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.prototype.setNlgList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Nlg=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Nlg}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.prototype.addNlg = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Nlg, opt_index);
};


proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.prototype.clearNlgList = function() {
  this.setNlgList([]);
};


/**
 * repeated Visual visual = 4;
 * @return {!Array<!proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Visual>}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.prototype.getVisualList = function() {
  return /** @type{!Array<!proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Visual>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Visual, 4));
};


/** @param {!Array<!proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Visual>} value */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.prototype.setVisualList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Visual=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Visual}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.prototype.addVisual = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Visual, opt_index);
};


proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.prototype.clearVisualList = function() {
  this.setVisualList([]);
};


/**
 * repeated Audio audio = 5;
 * @return {!Array<!proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio>}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.prototype.getAudioList = function() {
  return /** @type{!Array<!proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio, 5));
};


/** @param {!Array<!proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio>} value */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.prototype.setAudioList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.prototype.addAudio = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.Audio, opt_index);
};


proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction.prototype.clearAudioList = function() {
  this.setAudioList([]);
};


/**
 * optional DataAction data = 1;
 * @return {?proto.nuance.dialog.runtime.common.v1beta1.Action.DataAction}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.prototype.getData = function() {
  return /** @type{?proto.nuance.dialog.runtime.common.v1beta1.Action.DataAction} */ (
    jspb.Message.getWrapperField(this, proto.nuance.dialog.runtime.common.v1beta1.Action.DataAction, 1));
};


/** @param {?proto.nuance.dialog.runtime.common.v1beta1.Action.DataAction|undefined} value */
proto.nuance.dialog.runtime.common.v1beta1.Action.prototype.setData = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.nuance.dialog.runtime.common.v1beta1.Action.oneofGroups_[0], value);
};


proto.nuance.dialog.runtime.common.v1beta1.Action.prototype.clearData = function() {
  this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PromptAction prompt = 2;
 * @return {?proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.prototype.getPrompt = function() {
  return /** @type{?proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction} */ (
    jspb.Message.getWrapperField(this, proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction, 2));
};


/** @param {?proto.nuance.dialog.runtime.common.v1beta1.Action.PromptAction|undefined} value */
proto.nuance.dialog.runtime.common.v1beta1.Action.prototype.setPrompt = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.nuance.dialog.runtime.common.v1beta1.Action.oneofGroups_[0], value);
};


proto.nuance.dialog.runtime.common.v1beta1.Action.prototype.clearPrompt = function() {
  this.setPrompt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dialog.runtime.common.v1beta1.Action.prototype.hasPrompt = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload.repeatedFields_, null);
};
goog.inherits(proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload.displayName = 'proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    propertiesMap: (f = msg.getPropertiesMap()) ? f.toObject(includeInstance, undefined) : [],
    grammarsList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload}
 */
proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload;
  return proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload}
 */
proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getPropertiesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addGrammars(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPropertiesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getGrammarsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * map<string, string> properties = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload.prototype.getPropertiesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload.prototype.clearPropertiesMap = function() {
  this.getPropertiesMap().clear();
};


/**
 * repeated string grammars = 2;
 * @return {!Array<string>}
 */
proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload.prototype.getGrammarsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload.prototype.setGrammarsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload.prototype.addGrammars = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.nuance.dialog.runtime.common.v1beta1.OrchestrationPayload.prototype.clearGrammarsList = function() {
  this.setGrammarsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dialog.runtime.common.v1beta1.ViewData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nuance.dialog.runtime.common.v1beta1.ViewData.repeatedFields_, null);
};
goog.inherits(proto.nuance.dialog.runtime.common.v1beta1.ViewData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nuance.dialog.runtime.common.v1beta1.ViewData.displayName = 'proto.nuance.dialog.runtime.common.v1beta1.ViewData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nuance.dialog.runtime.common.v1beta1.ViewData.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dialog.runtime.common.v1beta1.ViewData.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dialog.runtime.common.v1beta1.ViewData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.ViewData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.ViewData.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    componentsList: jspb.Message.toObjectList(msg.getComponentsList(),
    proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent.toObject, includeInstance),
    variablesMap: (f = msg.getVariablesMap()) ? f.toObject(includeInstance, proto.google.protobuf.Struct.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.ViewData}
 */
proto.nuance.dialog.runtime.common.v1beta1.ViewData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dialog.runtime.common.v1beta1.ViewData;
  return proto.nuance.dialog.runtime.common.v1beta1.ViewData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.ViewData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.ViewData}
 */
proto.nuance.dialog.runtime.common.v1beta1.ViewData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent;
      reader.readMessage(value,proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent.deserializeBinaryFromReader);
      msg.addComponents(value);
      break;
    case 3:
      var value = msg.getVariablesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.google.protobuf.Struct.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dialog.runtime.common.v1beta1.ViewData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dialog.runtime.common.v1beta1.ViewData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.ViewData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.ViewData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getComponentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent.serializeBinaryToWriter
    );
  }
  f = message.getVariablesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.google.protobuf.Struct.serializeBinaryToWriter);
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent.displayName = 'proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent.toObject = function(includeInstance, msg) {
  var f, obj = {
    slot: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, ""),
    displayText: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent}
 */
proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent;
  return proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent}
 */
proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlot(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSlot();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDisplayText();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string slot = 1;
 * @return {string}
 */
proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent.prototype.getSlot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent.prototype.setSlot = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string display_text = 3;
 * @return {string}
 */
proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent.prototype.getDisplayText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent.prototype.setDisplayText = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.nuance.dialog.runtime.common.v1beta1.ViewData.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nuance.dialog.runtime.common.v1beta1.ViewData.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated ViewComponent components = 2;
 * @return {!Array<!proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent>}
 */
proto.nuance.dialog.runtime.common.v1beta1.ViewData.prototype.getComponentsList = function() {
  return /** @type{!Array<!proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent, 2));
};


/** @param {!Array<!proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent>} value */
proto.nuance.dialog.runtime.common.v1beta1.ViewData.prototype.setComponentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent}
 */
proto.nuance.dialog.runtime.common.v1beta1.ViewData.prototype.addComponents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.nuance.dialog.runtime.common.v1beta1.ViewData.ViewComponent, opt_index);
};


proto.nuance.dialog.runtime.common.v1beta1.ViewData.prototype.clearComponentsList = function() {
  this.setComponentsList([]);
};


/**
 * map<string, google.protobuf.Struct> variables = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.google.protobuf.Struct>}
 */
proto.nuance.dialog.runtime.common.v1beta1.ViewData.prototype.getVariablesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.google.protobuf.Struct>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.google.protobuf.Struct));
};


proto.nuance.dialog.runtime.common.v1beta1.ViewData.prototype.clearVariablesMap = function() {
  this.getVariablesMap().clear();
};


goog.object.extend(exports, proto.nuance.dialog.runtime.common.v1beta1);
