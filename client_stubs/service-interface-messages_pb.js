/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
goog.object.extend(proto, google_protobuf_struct_pb);
var runtime$interface$messages_pb = require('./runtime-interface-messages_pb.js');
goog.object.extend(proto, runtime$interface$messages_pb);
goog.exportSymbol('proto.nuance.dialog.channelconnector.v1beta1.ExecuteRequest', null, global);
goog.exportSymbol('proto.nuance.dialog.channelconnector.v1beta1.ExecuteResponse', null, global);
goog.exportSymbol('proto.nuance.dialog.channelconnector.v1beta1.StartRequest', null, global);
goog.exportSymbol('proto.nuance.dialog.channelconnector.v1beta1.StartResponse', null, global);
goog.exportSymbol('proto.nuance.dialog.channelconnector.v1beta1.StopRequest', null, global);
goog.exportSymbol('proto.nuance.dialog.channelconnector.v1beta1.StopResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dialog.channelconnector.v1beta1.StartRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.dialog.channelconnector.v1beta1.StartRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nuance.dialog.channelconnector.v1beta1.StartRequest.displayName = 'proto.nuance.dialog.channelconnector.v1beta1.StartRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dialog.channelconnector.v1beta1.StartRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dialog.channelconnector.v1beta1.StartRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dialog.channelconnector.v1beta1.StartRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.channelconnector.v1beta1.StartRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    selector: (f = msg.getSelector()) && runtime$interface$messages_pb.Selector.toObject(includeInstance, f),
    payload: (f = msg.getPayload()) && runtime$interface$messages_pb.StartRequestPayload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dialog.channelconnector.v1beta1.StartRequest}
 */
proto.nuance.dialog.channelconnector.v1beta1.StartRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dialog.channelconnector.v1beta1.StartRequest;
  return proto.nuance.dialog.channelconnector.v1beta1.StartRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dialog.channelconnector.v1beta1.StartRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dialog.channelconnector.v1beta1.StartRequest}
 */
proto.nuance.dialog.channelconnector.v1beta1.StartRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 2:
      var value = new runtime$interface$messages_pb.Selector;
      reader.readMessage(value,runtime$interface$messages_pb.Selector.deserializeBinaryFromReader);
      msg.setSelector(value);
      break;
    case 3:
      var value = new runtime$interface$messages_pb.StartRequestPayload;
      reader.readMessage(value,runtime$interface$messages_pb.StartRequestPayload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dialog.channelconnector.v1beta1.StartRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dialog.channelconnector.v1beta1.StartRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dialog.channelconnector.v1beta1.StartRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.channelconnector.v1beta1.StartRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSelector();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      runtime$interface$messages_pb.Selector.serializeBinaryToWriter
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      runtime$interface$messages_pb.StartRequestPayload.serializeBinaryToWriter
    );
  }
};


/**
 * optional string session_id = 1;
 * @return {string}
 */
proto.nuance.dialog.channelconnector.v1beta1.StartRequest.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nuance.dialog.channelconnector.v1beta1.StartRequest.prototype.setSessionId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional nuance.dialog.runtime.common.v1beta1.Selector selector = 2;
 * @return {?proto.nuance.dialog.runtime.common.v1beta1.Selector}
 */
proto.nuance.dialog.channelconnector.v1beta1.StartRequest.prototype.getSelector = function() {
  return /** @type{?proto.nuance.dialog.runtime.common.v1beta1.Selector} */ (
    jspb.Message.getWrapperField(this, runtime$interface$messages_pb.Selector, 2));
};


/** @param {?proto.nuance.dialog.runtime.common.v1beta1.Selector|undefined} value */
proto.nuance.dialog.channelconnector.v1beta1.StartRequest.prototype.setSelector = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.nuance.dialog.channelconnector.v1beta1.StartRequest.prototype.clearSelector = function() {
  this.setSelector(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dialog.channelconnector.v1beta1.StartRequest.prototype.hasSelector = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional nuance.dialog.runtime.common.v1beta1.StartRequestPayload payload = 3;
 * @return {?proto.nuance.dialog.runtime.common.v1beta1.StartRequestPayload}
 */
proto.nuance.dialog.channelconnector.v1beta1.StartRequest.prototype.getPayload = function() {
  return /** @type{?proto.nuance.dialog.runtime.common.v1beta1.StartRequestPayload} */ (
    jspb.Message.getWrapperField(this, runtime$interface$messages_pb.StartRequestPayload, 3));
};


/** @param {?proto.nuance.dialog.runtime.common.v1beta1.StartRequestPayload|undefined} value */
proto.nuance.dialog.channelconnector.v1beta1.StartRequest.prototype.setPayload = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.nuance.dialog.channelconnector.v1beta1.StartRequest.prototype.clearPayload = function() {
  this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dialog.channelconnector.v1beta1.StartRequest.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dialog.channelconnector.v1beta1.StartResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.dialog.channelconnector.v1beta1.StartResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nuance.dialog.channelconnector.v1beta1.StartResponse.displayName = 'proto.nuance.dialog.channelconnector.v1beta1.StartResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dialog.channelconnector.v1beta1.StartResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dialog.channelconnector.v1beta1.StartResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dialog.channelconnector.v1beta1.StartResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.channelconnector.v1beta1.StartResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: (f = msg.getPayload()) && runtime$interface$messages_pb.StartResponsePayload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dialog.channelconnector.v1beta1.StartResponse}
 */
proto.nuance.dialog.channelconnector.v1beta1.StartResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dialog.channelconnector.v1beta1.StartResponse;
  return proto.nuance.dialog.channelconnector.v1beta1.StartResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dialog.channelconnector.v1beta1.StartResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dialog.channelconnector.v1beta1.StartResponse}
 */
proto.nuance.dialog.channelconnector.v1beta1.StartResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new runtime$interface$messages_pb.StartResponsePayload;
      reader.readMessage(value,runtime$interface$messages_pb.StartResponsePayload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dialog.channelconnector.v1beta1.StartResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dialog.channelconnector.v1beta1.StartResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dialog.channelconnector.v1beta1.StartResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.channelconnector.v1beta1.StartResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      runtime$interface$messages_pb.StartResponsePayload.serializeBinaryToWriter
    );
  }
};


/**
 * optional nuance.dialog.runtime.common.v1beta1.StartResponsePayload payload = 1;
 * @return {?proto.nuance.dialog.runtime.common.v1beta1.StartResponsePayload}
 */
proto.nuance.dialog.channelconnector.v1beta1.StartResponse.prototype.getPayload = function() {
  return /** @type{?proto.nuance.dialog.runtime.common.v1beta1.StartResponsePayload} */ (
    jspb.Message.getWrapperField(this, runtime$interface$messages_pb.StartResponsePayload, 1));
};


/** @param {?proto.nuance.dialog.runtime.common.v1beta1.StartResponsePayload|undefined} value */
proto.nuance.dialog.channelconnector.v1beta1.StartResponse.prototype.setPayload = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.nuance.dialog.channelconnector.v1beta1.StartResponse.prototype.clearPayload = function() {
  this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dialog.channelconnector.v1beta1.StartResponse.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dialog.channelconnector.v1beta1.ExecuteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.dialog.channelconnector.v1beta1.ExecuteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nuance.dialog.channelconnector.v1beta1.ExecuteRequest.displayName = 'proto.nuance.dialog.channelconnector.v1beta1.ExecuteRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dialog.channelconnector.v1beta1.ExecuteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dialog.channelconnector.v1beta1.ExecuteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dialog.channelconnector.v1beta1.ExecuteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.channelconnector.v1beta1.ExecuteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    selector: (f = msg.getSelector()) && runtime$interface$messages_pb.Selector.toObject(includeInstance, f),
    payload: (f = msg.getPayload()) && runtime$interface$messages_pb.ExecuteRequestPayload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dialog.channelconnector.v1beta1.ExecuteRequest}
 */
proto.nuance.dialog.channelconnector.v1beta1.ExecuteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dialog.channelconnector.v1beta1.ExecuteRequest;
  return proto.nuance.dialog.channelconnector.v1beta1.ExecuteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dialog.channelconnector.v1beta1.ExecuteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dialog.channelconnector.v1beta1.ExecuteRequest}
 */
proto.nuance.dialog.channelconnector.v1beta1.ExecuteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 2:
      var value = new runtime$interface$messages_pb.Selector;
      reader.readMessage(value,runtime$interface$messages_pb.Selector.deserializeBinaryFromReader);
      msg.setSelector(value);
      break;
    case 3:
      var value = new runtime$interface$messages_pb.ExecuteRequestPayload;
      reader.readMessage(value,runtime$interface$messages_pb.ExecuteRequestPayload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dialog.channelconnector.v1beta1.ExecuteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dialog.channelconnector.v1beta1.ExecuteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dialog.channelconnector.v1beta1.ExecuteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.channelconnector.v1beta1.ExecuteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSelector();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      runtime$interface$messages_pb.Selector.serializeBinaryToWriter
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      runtime$interface$messages_pb.ExecuteRequestPayload.serializeBinaryToWriter
    );
  }
};


/**
 * optional string session_id = 1;
 * @return {string}
 */
proto.nuance.dialog.channelconnector.v1beta1.ExecuteRequest.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nuance.dialog.channelconnector.v1beta1.ExecuteRequest.prototype.setSessionId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional nuance.dialog.runtime.common.v1beta1.Selector selector = 2;
 * @return {?proto.nuance.dialog.runtime.common.v1beta1.Selector}
 */
proto.nuance.dialog.channelconnector.v1beta1.ExecuteRequest.prototype.getSelector = function() {
  return /** @type{?proto.nuance.dialog.runtime.common.v1beta1.Selector} */ (
    jspb.Message.getWrapperField(this, runtime$interface$messages_pb.Selector, 2));
};


/** @param {?proto.nuance.dialog.runtime.common.v1beta1.Selector|undefined} value */
proto.nuance.dialog.channelconnector.v1beta1.ExecuteRequest.prototype.setSelector = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.nuance.dialog.channelconnector.v1beta1.ExecuteRequest.prototype.clearSelector = function() {
  this.setSelector(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dialog.channelconnector.v1beta1.ExecuteRequest.prototype.hasSelector = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload payload = 3;
 * @return {?proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload}
 */
proto.nuance.dialog.channelconnector.v1beta1.ExecuteRequest.prototype.getPayload = function() {
  return /** @type{?proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload} */ (
    jspb.Message.getWrapperField(this, runtime$interface$messages_pb.ExecuteRequestPayload, 3));
};


/** @param {?proto.nuance.dialog.runtime.common.v1beta1.ExecuteRequestPayload|undefined} value */
proto.nuance.dialog.channelconnector.v1beta1.ExecuteRequest.prototype.setPayload = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.nuance.dialog.channelconnector.v1beta1.ExecuteRequest.prototype.clearPayload = function() {
  this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dialog.channelconnector.v1beta1.ExecuteRequest.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dialog.channelconnector.v1beta1.ExecuteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.dialog.channelconnector.v1beta1.ExecuteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nuance.dialog.channelconnector.v1beta1.ExecuteResponse.displayName = 'proto.nuance.dialog.channelconnector.v1beta1.ExecuteResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dialog.channelconnector.v1beta1.ExecuteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dialog.channelconnector.v1beta1.ExecuteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dialog.channelconnector.v1beta1.ExecuteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.channelconnector.v1beta1.ExecuteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: (f = msg.getPayload()) && runtime$interface$messages_pb.ExecuteResponsePayload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dialog.channelconnector.v1beta1.ExecuteResponse}
 */
proto.nuance.dialog.channelconnector.v1beta1.ExecuteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dialog.channelconnector.v1beta1.ExecuteResponse;
  return proto.nuance.dialog.channelconnector.v1beta1.ExecuteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dialog.channelconnector.v1beta1.ExecuteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dialog.channelconnector.v1beta1.ExecuteResponse}
 */
proto.nuance.dialog.channelconnector.v1beta1.ExecuteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new runtime$interface$messages_pb.ExecuteResponsePayload;
      reader.readMessage(value,runtime$interface$messages_pb.ExecuteResponsePayload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dialog.channelconnector.v1beta1.ExecuteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dialog.channelconnector.v1beta1.ExecuteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dialog.channelconnector.v1beta1.ExecuteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.channelconnector.v1beta1.ExecuteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      runtime$interface$messages_pb.ExecuteResponsePayload.serializeBinaryToWriter
    );
  }
};


/**
 * optional nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload payload = 1;
 * @return {?proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload}
 */
proto.nuance.dialog.channelconnector.v1beta1.ExecuteResponse.prototype.getPayload = function() {
  return /** @type{?proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload} */ (
    jspb.Message.getWrapperField(this, runtime$interface$messages_pb.ExecuteResponsePayload, 1));
};


/** @param {?proto.nuance.dialog.runtime.common.v1beta1.ExecuteResponsePayload|undefined} value */
proto.nuance.dialog.channelconnector.v1beta1.ExecuteResponse.prototype.setPayload = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.nuance.dialog.channelconnector.v1beta1.ExecuteResponse.prototype.clearPayload = function() {
  this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.dialog.channelconnector.v1beta1.ExecuteResponse.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dialog.channelconnector.v1beta1.StopRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.dialog.channelconnector.v1beta1.StopRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nuance.dialog.channelconnector.v1beta1.StopRequest.displayName = 'proto.nuance.dialog.channelconnector.v1beta1.StopRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dialog.channelconnector.v1beta1.StopRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dialog.channelconnector.v1beta1.StopRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dialog.channelconnector.v1beta1.StopRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.channelconnector.v1beta1.StopRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dialog.channelconnector.v1beta1.StopRequest}
 */
proto.nuance.dialog.channelconnector.v1beta1.StopRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dialog.channelconnector.v1beta1.StopRequest;
  return proto.nuance.dialog.channelconnector.v1beta1.StopRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dialog.channelconnector.v1beta1.StopRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dialog.channelconnector.v1beta1.StopRequest}
 */
proto.nuance.dialog.channelconnector.v1beta1.StopRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dialog.channelconnector.v1beta1.StopRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dialog.channelconnector.v1beta1.StopRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dialog.channelconnector.v1beta1.StopRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.channelconnector.v1beta1.StopRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string session_id = 1;
 * @return {string}
 */
proto.nuance.dialog.channelconnector.v1beta1.StopRequest.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nuance.dialog.channelconnector.v1beta1.StopRequest.prototype.setSessionId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.dialog.channelconnector.v1beta1.StopResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.dialog.channelconnector.v1beta1.StopResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nuance.dialog.channelconnector.v1beta1.StopResponse.displayName = 'proto.nuance.dialog.channelconnector.v1beta1.StopResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.dialog.channelconnector.v1beta1.StopResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.dialog.channelconnector.v1beta1.StopResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.dialog.channelconnector.v1beta1.StopResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.channelconnector.v1beta1.StopResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.dialog.channelconnector.v1beta1.StopResponse}
 */
proto.nuance.dialog.channelconnector.v1beta1.StopResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.dialog.channelconnector.v1beta1.StopResponse;
  return proto.nuance.dialog.channelconnector.v1beta1.StopResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.dialog.channelconnector.v1beta1.StopResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.dialog.channelconnector.v1beta1.StopResponse}
 */
proto.nuance.dialog.channelconnector.v1beta1.StopResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.dialog.channelconnector.v1beta1.StopResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.dialog.channelconnector.v1beta1.StopResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.dialog.channelconnector.v1beta1.StopResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.dialog.channelconnector.v1beta1.StopResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.nuance.dialog.channelconnector.v1beta1);
